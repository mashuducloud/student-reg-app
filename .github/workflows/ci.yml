name: CI

on:
  workflow_dispatch:
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "dev" ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-ci
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  quality-checks:
    name: Quality Checks (lint & yaml)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.11 (with pip cache)
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip
          cache-dependency-path: backend/requirements-ci.txt

      - name: Install linters & tools
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements-ci.txt

      - name: Python Lint (flake8)
        run: flake8 backend/

      - name: Security Lint (bandit — non-blocking)
        run: bandit -r backend/ || true

      - name: YAML Lint (observability configs)
        run: yamllint infra/otel-collector-config.yaml infra/prometheus.yml infra/tempo.yaml

  build-and-scan:
    name: Build & Trivy Scan (local images)
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: [quality-checks]
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend (with GHA cache)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: infra/Dockerfile.backend
          tags: student-app:ci
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build frontend (with GHA cache)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: infra/Dockerfile.frontend
          tags: student-frontend:ci
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Trivy Scan — BACKEND
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: student-app:ci
          severity: HIGH,CRITICAL
          ignore-unfixed: true
          format: table
          exit-code: 1

      - name: Trivy Scan — FRONTEND
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: student-frontend:ci
          severity: HIGH,CRITICAL
          ignore-unfixed: true
          format: table
          exit-code: 1

      - name: Print local image sizes
        run: docker images --format 'table {{.Repository}}\t{{.Tag}}\t{{.Size}}'

  infra-smoke-and-tests:
    name: Infra Smoke & Backend Tests (+ HTML Report)
    runs-on: ubuntu-latest
    timeout-minutes: 35
    needs: [quality-checks]
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate required secrets
        run: |
          if [ -z "${DB_PASSWORD}" ] || [ -z "${MYSQL_ROOT_PASSWORD}" ]; then
            echo "Error: Missing DB_PASSWORD or MYSQL_ROOT_PASSWORD secrets."
            exit 1
          fi
        env:
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}

      - name: Prepare .env for docker-compose
        env:
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          MYSQL_PASSWORD: ${{ secrets.DB_PASSWORD }}
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
        run: |
          mkdir -p infra
          cat > infra/.env <<EOF
          DB_HOST=mysql-db
          DB_PORT=3306
          DB_NAME=student_registration_db
          DB_USER=student
          DB_PASSWORD=${DB_PASSWORD}
          MYSQL_DATABASE=student_registration_db
          MYSQL_USER=student
          MYSQL_PASSWORD=${MYSQL_PASSWORD}
          MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
          MYSQL_ROOT_HOST=%
          EOF

      - name: Compose config (sanity) → artifact
        run: docker compose -f infra/docker-compose.yml config > compose.config.yaml

      - name: Start observability stack + app
        run: |
          docker compose -f infra/docker-compose.yml up -d
          docker compose -f infra/docker-compose.yml ps

      - name: Prepare helper scripts (LF + +x)
        run: |
          set -e
          shopt -s nullglob
          for f in .github/scripts/*.sh; do
            sed -i 's/\r$//' "$f" || true
            chmod +x "$f" || true
          done

      - name: Smoke health (Prometheus/OTEL/app)
        run: bash ./.github/scripts/health-check.sh

      - name: Verify Prometheus active targets
        run: python ./.github/scripts/verify-targets.py

      - name: Run backend tests + coverage (persist artifacts)
        run: |
          mkdir -p coverage
          docker compose -f infra/docker-compose.yml run --rm             -v "$PWD/coverage:/app/coverage"             tests             pytest --cov=. --cov-report=term-missing                    --cov-report=xml:coverage/coverage.xml                    --cov-report=html:coverage/htmlcov -v

      - name: Generate HTML CI report
        run: python ./.github/scripts/generate-report.py

      - name: Upload HTML & coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ci-infra-report
          path: |
            compose.config.yaml
            ci-report.html
            coverage/coverage.xml
            coverage/htmlcov/
          if-no-files-found: error

      - name: Tear down compose (always)
        if: always()
        run: docker compose -f infra/docker-compose.yml down -v

  open-pr-when-ahead:
    name: Auto PR dev → default
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [quality-checks, build-and-scan, infra-smoke-and-tests]
    if: success() && github.ref == 'refs/heads/dev'
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Compare dev → default branch
        id: compare
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const repoData = await github.request('GET /repos/{owner}/{repo}', { owner, repo });
            const base = repoData.data.default_branch;
            const head = 'dev';
            if (base === head) {
              core.setOutput('base', base);
              core.setOutput('ahead_by', 0);
              return;
            }
            const cmp = await github.request('GET /repos/{owner}/{repo}/compare/{base}...{head}', { owner, repo, base, head });
            core.setOutput('base', base);
            core.setOutput('ahead_by', cmp.data.ahead_by);

      - name: Open or reuse PR dev → default
        if: steps.compare.outputs.ahead_by && steps.compare.outputs.ahead_by > 0
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT_PR || github.token }}
          script: |
            const { owner, repo } = context.repo;
            const base = '${{ steps.compare.outputs.base }}';
            const head = 'dev';
            const prs = await github.rest.pulls.list({ owner, repo, state: 'open', base, head: `${owner}:${head}` });
            if (prs.data.length > 0) {
              core.info(`PR already open: #${prs.data[0].number} (${prs.data[0].html_url})`);
              return;
            }
            try {
              const body = `Auto PR opened by CI after checks on **${head}** passed.\n\nCommit: ${context.sha}\nActor: @${context.actor}`;
              const pr = await github.rest.pulls.create({ owner, repo, head, base, title: `Auto PR: ${head} → ${base} (CI)`, body });
              core.info(`Created PR #${pr.data.number} (${pr.data.html_url})`);
            } catch (err) {
              if (err.status === 422 && /No commits between/i.test(err.message)) {
                core.info('No commits between branches; skipping PR.');
              } else {
                throw err;
              }
            }
