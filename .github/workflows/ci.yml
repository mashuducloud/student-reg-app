name: CI

on:
  workflow_dispatch:
  push:
    branches: ["dev"]
  pull_request:
    branches: ["dev"]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-ci
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  # ────────────────────────────────────────────────────────────────────────────
  # 1) Static Quality Gates
  # ────────────────────────────────────────────────────────────────────────────
  quality-checks:
    name: Quality Checks (lint & yaml)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.1

      - name: Set up Python 3.11 (with pip cache)
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip
          cache-dependency-path: backend/requirements-ci.txt

      - name: Install linters & tools
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements-ci.txt

      - name: Python Lint (flake8)
        run: flake8 backend/

      - name: Security Lint (bandit — non-blocking)
        run: bandit -r backend/ || true

      - name: YAML Lint (observability configs)
        run: yamllint infra/otel-collector-config.yaml infra/prometheus.yml infra/tempo.yaml

  # ────────────────────────────────────────────────────────────────────────────
  # 2) Build + Trivy (local) — runs in parallel after quality-checks
  # ────────────────────────────────────────────────────────────────────────────
  build-and-scan:
    name: Build & Trivy Scan (local images)
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: [quality-checks]
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend (with cache)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: infra/Dockerfile.backend
          tags: student-app:ci
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build frontend (with cache)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: infra/Dockerfile.frontend
          tags: student-frontend:ci
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Trivy Scan — BACKEND
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: student-app:ci
          severity: HIGH,CRITICAL
          ignore-unfixed: true
          format: table
          exit-code: 1

      - name: Trivy Scan — FRONTEND
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: student-frontend:ci
          severity: HIGH,CRITICAL
          ignore-unfixed: true
          format: table
          exit-code: 1

      - name: Print local image sizes
        run: docker images --format 'table {{.Repository}}\t{{.Tag}}\t{{.Size}}'

  # ────────────────────────────────────────────────────────────────────────────
  # 3) Compose Smoke + Tests + HTML report — runs in parallel after quality-checks
  # ────────────────────────────────────────────────────────────────────────────
  infra-smoke-and-tests:
    name: Infra Smoke & Backend Tests (+ HTML Report)
    runs-on: ubuntu-latest
    timeout-minutes: 35
    needs: [quality-checks]
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.1

      # Prefer DB_SECRET (multiline .env). Fallback to individual secrets.
      - name: Prepare .env for docker-compose (no heredoc)
        env:
          DB_SECRET: ${{ secrets.DB_SECRET }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
        run: |
          set -e
          mkdir -p infra
          if [ -n "${DB_SECRET}" ]; then
            printf "%s\n" "${DB_SECRET}" > infra/.env
          else
            if [ -z "${DB_PASSWORD}" ] || [ -z "${MYSQL_ROOT_PASSWORD}" ]; then
              echo "Provide DB_SECRET (preferred) OR both DB_PASSWORD and MYSQL_ROOT_PASSWORD." >&2
              exit 1
            fi
            {
              printf 'DB_HOST=mysql-db\n'
              printf 'DB_PORT=3306\n'
              printf 'DB_NAME=student_registration_db\n'
              printf 'DB_USER=student\n'
              printf 'DB_PASSWORD=%s\n' "${DB_PASSWORD}"
              printf 'MYSQL_DATABASE=student_registration_db\n'
              printf 'MYSQL_USER=student\n'
              printf 'MYSQL_PASSWORD=%s\n' "${DB_PASSWORD}"
              printf 'MYSQL_ROOT_PASSWORD=%s\n' "${MYSQL_ROOT_PASSWORD}"
              printf 'MYSQL_ROOT_HOST=%%\n'
            } > infra/.env
          fi
          echo "Wrote infra/.env"

      - name: Compose config (sanity) → artifact
        run: docker compose -f infra/docker-compose.yml config > compose.config.yaml

      - name: Start observability stack + app
        run: |
          docker compose -f infra/docker-compose.yml up -d
          docker compose -f infra/docker-compose.yml ps

      - name: Prepare helper scripts (LF + +x)
        run: |
          set -e
          shopt -s nullglob
          for f in .github/scripts/*.sh; do
            sed -i 's/\r$//' "$f" || true
            chmod +x "$f" || true
          done

      - name: Smoke health (Prometheus/OTEL/app)
        run: |
          if [ -x ./.github/scripts/health-check.sh ]; then
            bash ./.github/scripts/health-check.sh
          else
            echo "health-check.sh not found; skipping."
          fi

      - name: Verify Prometheus active targets
        run: |
          if [ -f ./.github/scripts/verify-targets.py ]; then
            python ./.github/scripts/verify-targets.py
          else
            echo "verify-targets.py not found; skipping."
          fi

      - name: Run backend tests + coverage (persist artifacts)
        run: |
          mkdir -p coverage
          docker compose -f infra/docker-compose.yml run --rm \
            -v "$PWD/coverage:/app/coverage" \
            tests \
            pytest --cov=. --cov-report=term-missing \
                   --cov-report=xml:coverage/coverage.xml \
                   --cov-report=html:coverage/htmlcov -v

      - name: Generate HTML CI report
        run: |
          if [ -f ./.github/scripts/generate-report.py ]; then
            python ./.github/scripts/generate-report.py
          else
            echo "<html><body><h1>CI Report</h1><p>No generator script found.</p></body></html>" > ci-report.html
          fi

      - name: Upload HTML & coverage artifacts
        uses: actions/upload-artifact@v4.3.1
        with:
          name: ci-infra-report
          path: |
            compose.config.yaml
            ci-report.html
            coverage/coverage.xml
            coverage/htmlcov/
          if-no-files-found: error

      - name: Tear down compose (always)
        if: always()
        run: docker compose -f infra/docker-compose.yml down -v

  # ────────────────────────────────────────────────────────────────────────────
  # 4) Auto PR dev → default (PAT_PR with fallback to GITHUB_TOKEN)
  # ────────────────────────────────────────────────────────────────────────────
  open-pr-when-ahead:
    name: Auto PR dev → default
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [quality-checks, build-and-scan, infra-smoke-and-tests]
    if: success() && github.ref == 'refs/heads/dev'
    permissions:
      contents: write
      pull-requests: write
    steps:
      - id: pick-token
        name: Choose auth token (PAT if set, else GITHUB_TOKEN)
        run: |
          if [ -n "${{ secrets.PAT_PR }}" ]; then
            echo "token=${{ secrets.PAT_PR }}" >> "$GITHUB_OUTPUT"
            echo "Using PAT_PR"
          else
            echo "token=${{ github.token }}" >> "$GITHUB_OUTPUT"
            echo "PAT_PR not set; falling back to GITHUB_TOKEN"
          fi

      - name: Open or reuse PR (compute compare inline)
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.pick-token.outputs.token }}
          script: |
            const { owner, repo } = context.repo;
            // Resolve default branch
            const { data: repoData } = await github.request('GET /repos/{owner}/{repo}', { owner, repo });
            const base = repoData.default_branch;
            const head = 'dev';
            if (base === head) { core.info(`base==head (${base}); skipping.`); return; }

            // Compare dev → base
            const { data: cmp } = await github.request('GET /repos/{owner}/{repo}/compare/{base}...{head}', {
              owner, repo, base, head
            });
            const aheadBy = Number(cmp?.ahead_by ?? 0);
            core.info(`dev is ahead of ${base} by ${aheadBy} commits`);
            if (!(aheadBy > 0)) { core.info('Not ahead; nothing to PR.'); return; }

            // Reuse existing PR if present
            const { data: prs } = await github.rest.pulls.list({
              owner, repo, state: 'open', base, head: `${owner}:${head}`
            });
            if (prs.length > 0) {
              core.info(`PR already open: #${prs[0].number} (${prs[0].html_url})`);
              return;
            }

            // Create PR
            const title = `Auto PR: ${head} → ${base} (CI)`;
            const body = `Opened by CI.\n\nBase: ${base}\nCommit: ${context.sha}\nActor: @${context.actor}`;
            try {
              const { data: pr } = await github.rest.pulls.create({
                owner, repo, head, base, title, body
              });
              core.info(`Created PR #${pr.number} (${pr.html_url})`);
            } catch (err) {
              if (err.status === 422 && /No commits between/i.test(err.message)) {
                core.info('No commits between branches; skipping PR.');
              } else {
                throw err;
              }
            }
