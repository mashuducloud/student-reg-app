name: CI

on:
  workflow_dispatch:
  push:
    branches: ["dev"]
  pull_request:
    branches: ["dev"]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-ci
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  # ────────────────────────────────────────────────────────────────────────────
  # 1) LINT & UNIT TESTS WITH COVERAGE
  # ────────────────────────────────────────────────────────────────────────────
  lint-and-test:
    name: Lint and Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.11 with pip cache
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: |
            backend/requirements-ci.txt
            backend/requirements.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements-ci.txt
          pip install -r backend/requirements.txt

      - name: Run Linters (flake8, bandit, yamllint)
        run: |
          flake8 backend/
          bandit -r backend/ || true
          yamllint infra/otel-collector-config.yaml infra/prometheus.yml infra/tempo.yaml

      - name: Run unit tests with coverage
        run: pytest --cov=backend --cov-report=xml --cov-report=html

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            htmlcov/
            coverage.xml
          if-no-files-found: error

  # ────────────────────────────────────────────────────────────────────────────
  # 2) BUILD, SCAN & SAVE ARTIFACTS
  # ────────────────────────────────────────────────────────────────────────────
  build-and-scan:
    name: Build, Scan, and Save Images
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: [lint-and-test]
    permissions:
      contents: read
      security-events: write # Required for uploading SARIF reports to the Security tab
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend and frontend with cache
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: |
            infra/Dockerfile.backend
            infra/Dockerfile.frontend
          tags: |
            student-app:ci
            student-frontend:ci
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Trivy Scan backend and upload to Security tab
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'student-app:ci'
          format: 'sarif'
          output: 'trivy-backend-results.sarif'
          severity: 'HIGH,CRITICAL'
          exit-code: 1

      - name: Trivy Scan frontend and upload to Security tab
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'student-frontend:ci'
          format: 'sarif'
          output: 'trivy-frontend-results.sarif'
          severity: 'HIGH,CRITICAL'
          exit-code: 1

      - name: Save Docker images as artifact
        run: docker save -o images.tar student-app:ci student-frontend:ci

      - name: Upload Docker images artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-images
          path: images.tar
          if-no-files-found: error

  # ────────────────────────────────────────────────────────────────────────────
  # 3) INTEGRATION TESTS
  # ────────────────────────────────────────────────────────────────────────────
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 35
    needs: [build-and-scan]
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Docker images artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-images

      - name: Load Docker images
        run: docker load -i images.tar

      - name: Ensure helper scripts are executable
        run: chmod +x .github/scripts/*.sh 2>/dev/null || true

      - name: Prepare .env for docker-compose
        env:
          DB_SECRET: ${{ secrets.DB_SECRET }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
        run: |
          set -euo pipefail
          mkdir -p infra
          if [ -n "${DB_SECRET:-}" ]; then
            printf '%s\n' "$DB_SECRET" > infra/.env
          else
            : "${DB_PASSWORD:?Missing DB_PASSWORD secret}"
            : "${MYSQL_ROOT_PASSWORD:?Missing MYSQL_ROOT_PASSWORD secret}"
            {
              echo "DB_HOST=mysql-db"
              echo "DB_PORT=3306"
              echo "DB_NAME=student_registration_db"
              echo "DB_USER=student"
              echo "DB_PASSWORD=${DB_PASSWORD}"
              echo "MYSQL_DATABASE=student_registration_db"
              echo "MYSQL_USER=student"
              echo "MYSQL_PASSWORD=${DB_PASSWORD}"
              echo "MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}"
              echo "MYSQL_ROOT_HOST=%"
            } > infra/.env
          fi
          sed -i 's/^[[:space:]]\+//' infra/.env || true
          echo "Wrote infra/.env"

      - name: Start services with Docker Compose
        run: |
          set -euo pipefail
          docker compose -f infra/docker-compose.yml -f infra/docker-compose.override.yml up -d --wait --wait-timeout 180
          docker compose -f infra/docker-compose.yml -f infra/docker-compose.override.yml ps

      - name: Run health checks and integration tests
        run: |
          ./.github/scripts/health-check.sh
          python .github/scripts/verify-targets.py
          python -m pip install -q pytest requests || true
          pytest -q tests/integration/test_health_e2e.py

      - name: Generate report artifacts
        if: always()
        run: |
          python .github/scripts/generate-report.py
          docker compose -f infra/docker-compose.yml -f infra/docker-compose.override.yml config > compose.config.yaml

      - name: Upload report artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-infra-report
          path: |
            compose.config.yaml
            ci-report.html
          if-no-files-found: error

      - name: Tear down compose
        if: always()
        run: docker compose -f infra/docker-compose.yml -f infra/docker-compose.override.yml down -v

  # ────────────────────────────────────────────────────────────────────────────
  # 4) AUTO PULL REQUEST
  # ────────────────────────────────────────────────────────────────────────────
  open-pr-when-ahead:
    name: Auto PR dev to default
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [integration-test]
    if: github.ref == 'refs/heads/dev'
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Compare dev to default branch
        id: compare
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            const { owner, repo } = context.repo;
            const head = 'dev';
            const { data: repoData } = await github.request('GET /repos/{owner}/{repo}', { owner, repo });
            const base = repoData.default_branch;
            core.setOutput('base', base);
            if (base === head) {
              core.info(`Default branch is '${base}', same as head; skipping.`);
              core.setOutput('is_ahead', 'false');
              return;
            }
            const { data: cmp } = await github.request('GET /repos/{owner}/{repo}/compare/{base}...{head}', { owner, repo, base, head });
            core.info(`dev is ahead of ${base} by ${cmp.ahead_by} commits`);
            core.setOutput('is_ahead', cmp.ahead_by > 0 ? 'true' : 'false');

      - name: Create or reuse PR when ahead
        if: steps.compare.outputs.is_ahead == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            const { owner, repo } = context.repo;
            const base = '${{ steps.compare.outputs.base }}';
            const head = 'dev';
            const { data: prs } = await github.rest.pulls.list({ owner, repo, state: 'open', base, head: `${owner}:${head}` });
            if (prs.length > 0) {
              core.info(`PR already open: #${prs[0].number} (${prs[0].html_url})`);
              return;
            }
            const body = `Auto PR created by CI after all checks passed on **${head}**.\n\nCommit: ${context.sha}\nActor: @${context.actor}`;
            const { data: pr } = await github.rest.pulls.create({ owner, repo, head, base, title: `Auto PR: ${head} → ${base}`, body });
            core.info(`Created PR #${pr.number} (${pr.html_url})`);

      - name: No PR needed
        if: steps.compare.outputs.is_ahead != 'true'
        run: echo "dev is not ahead; skipping PR creation."