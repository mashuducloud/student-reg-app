name: CI

on:
  workflow_dispatch:
  push:
    branches: ["dev"]
  pull_request:
    branches: ["dev"]

jobs:
  ci-checks:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: write          # needed for artifact upload and repo info
      pull-requests: write     # needed to open a PR with GITHUB_TOKEN (if allowed)

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install tooling
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt flake8 bandit pytest pytest-cov yamllint requests

      - name: Lint (flake8)
        run: flake8 backend/

      - name: Security scan (bandit, non-blocking)
        run: bandit -r backend/ || true

      - name: Validate YAML configs
        run: yamllint infra/otel-collector-config.yaml infra/prometheus.yml infra/tempo.yaml

      # Compose test env (writes a temporary .env)
      - name: Prepare CI env for docker-compose
        run: |
          mkdir -p infra
          cat > infra/.env <<'EOF'
          DB_HOST=mysql-db
          DB_PORT=3306
          DB_NAME=student_registration_db
          DB_USER=student
          DB_PASSWORD=ci_pw_123
          MYSQL_DATABASE=student_registration_db
          MYSQL_USER=student
          MYSQL_PASSWORD=ci_pw_123
          MYSQL_ROOT_PASSWORD=ci_root_123
          MYSQL_ROOT_HOST=%
          EOF
          echo "Wrote infra/.env for CI run."

      - name: Show Compose config (sanity check)
        run: docker compose -f infra/docker-compose.yml config

# --- Observability stack (wait for health) ---
- name: Start observability stack (wait)
  run: |
    docker compose -f infra/docker-compose.yml up -d \
      --wait --wait-timeout 120s \
      otel-collector tempo prometheus grafana app
    docker compose -f infra/docker-compose.yml ps

# --- In-network scrape sanity (single exec; with retries) ---
- name: In-network scrape sanity (from Prometheus container)
  run: |
    docker compose -f infra/docker-compose.yml exec -T prometheus sh -lc '
      set -eu
      ok=0
      for i in $(seq 1 30); do
        if wget -qO- http://student-app:9100/metrics >/dev/null; then ok=1; break; fi
        sleep 2
      done
      [ "$ok" -eq 1 ] || { echo "student-app metrics not ready"; exit 1; }

      ok=0
      for i in $(seq 1 30); do
        if wget -qO- http://otel-collector:9464/metrics >/dev/null; then ok=1; break; fi
        sleep 2
      done
      [ "$ok" -eq 1 ] || { echo "otel-collector metrics not ready"; exit 1; }

      wget -qO- http://localhost:9090/-/ready >/dev/null
    '


      - name: Verify Prometheus has active targets
        run: |
          python - <<'PY'
          import sys, requests
          r = requests.get("http://localhost:9091/api/v1/targets?state=active", timeout=20)
          r.raise_for_status()
          jobs = {t["labels"].get("job") for t in r.json()["data"]["activeTargets"]}
          required = {"prometheus","student-app","otel-collector"}
          missing = required - jobs
          if missing:
              print("Missing Prometheus targets:", missing)
              sys.exit(1)
          print("Prometheus targets OK:", jobs)
          PY

      # Run tests via Compose and persist coverage to host
      - name: Run backend tests with coverage (persist artifacts)
        run: |
          mkdir -p coverage
          docker compose -f infra/docker-compose.yml run --rm             -v "$PWD/coverage:/app/coverage"             tests             pytest --cov=. --cov-report=term-missing                    --cov-report=xml:coverage/coverage.xml                    --cov-report=html:coverage/htmlcov -v

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage/coverage.xml
            coverage/htmlcov/
          if-no-files-found: error

      # Build images (validation only)
      - name: Build backend image
        run: docker build -t student-app:ci -f infra/Dockerfile.backend .

      - name: Build frontend image
        run: docker build -t student-frontend:ci -f infra/Dockerfile.frontend .

      # Cleanup
      - name: Tear down compose resources
        if: always()
        run: docker compose -f infra/docker-compose.yml down -v

      # -------- Only open PR when dev is ahead of default branch --------
      - name: Compare dev → default branch
        id: compare
        if: success() && github.ref == 'refs/heads/dev'
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            // Resolve default branch dynamically (e.g. main/master)
            const { data: repoData } = await github.request('GET /repos/{owner}/{repo}', { owner, repo });
            const base = repoData.default_branch;
            const head = 'dev';

            if (base === head) {
              core.info(`Default branch (${base}) equals head (${head}); skipping compare.`);
              core.setOutput('base', base);
              core.setOutput('ahead_by', 0);
              return;
            }

            const { data: cmp } = await github.request('GET /repos/{owner}/{repo}/compare/{base}...{head}', {
              owner, repo, base, head
            });
            core.info(`dev is ahead of ${base} by ${cmp.ahead_by} commits`);
            core.setOutput('base', base);
            core.setOutput('ahead_by', cmp.ahead_by);

      - name: Open or reuse PR dev → default branch
        if: success() && github.ref == 'refs/heads/dev' && steps.compare.outputs.ahead_by > 0
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT_PR || secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const base = '${{ steps.compare.outputs.base }}';
            const head = 'dev';

            // Reuse existing open PR if present
            const { data: prs } = await github.rest.pulls.list({
              owner, repo, state: 'open', base, head: `${owner}:${head}`
            });
            if (prs.length > 0) {
              core.info(`PR already open: #${prs[0].number} (${prs[0].html_url})`);
              return;
            }

            // Create PR (handle 422 gracefully just in case)
            try {
              const body =
                `This PR was automatically opened by CI after all checks on **${head}** passed.` +
                `\n\nCommit: ${context.sha}` +
                `\nActor: @${context.actor}`;

              const { data: pr } = await github.rest.pulls.create({
                owner, repo, head, base,
                title: `Auto PR: ${head} → ${base} (opened by CI)`,
                body
              });
              core.info(`Created PR #${pr.number} (${pr.html_url})`);
            } catch (err) {
              if (err.status === 422 && /No commits between/i.test(err.message)) {
                core.info('No commits between branches; skipping PR.');
              } else {
                throw err;
              }
            }

      - name: Nothing to PR — skip
        if: steps.compare.outputs.ahead_by == 0
        run: echo "dev is not ahead of ${{ steps.compare.outputs.base }}; skipping PR creation."

