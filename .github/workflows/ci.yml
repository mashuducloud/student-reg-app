name: CI (PR-safe)

on:
  workflow_dispatch:
  push:
    branches: ["dev"]
  pull_request:
    branches: ["dev"]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-ci
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  quality-checks:
    name: Quality Checks (lint & yaml)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.1

      - name: Set up Python (3.11) with pip cache
        uses: actions/setup-python@v5.0.0
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: backend/requirements-ci.txt

      - name: Install linters & tools
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements-ci.txt

      - name: Python Lint (flake8)
        run: flake8 backend/

      - name: Security Lint (bandit — non-blocking)
        run: bandit -r backend/ || true

      - name: YAML Lint (observability configs)
        run: yamllint infra/otel-collector-config.yaml infra/prometheus.yml infra/tempo.yaml

  build-and-scan:
    name: Build & Trivy Scan (local images)
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: [quality-checks]
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.0.0

      - name: Build backend (with cache)
        uses: docker/build-push-action@v5.1.0
        with:
          context: .
          file: infra/Dockerfile.backend
          tags: student-app:ci
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build frontend (with cache)
        uses: docker/build-push-action@v5.1.0
        with:
          context: .
          file: infra/Dockerfile.frontend
          tags: student-frontend:ci
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Init Trivy cache dir
        run: mkdir -p ~/.cache/trivy

      - name: Cache Trivy DB
        uses: actions/cache@v4.0.2
        with:
          path: ~/.cache/trivy
          key: trivy-db-${{ runner.os }}-v1
          restore-keys: |
            trivy-db-${{ runner.os }}-

      - name: Trivy Scan — BACKEND
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: student-app:ci
          severity: HIGH,CRITICAL
          ignore-unfixed: true
          format: table
          exit-code: 1
          cache-dir: ~/.cache/trivy

      - name: Trivy Scan — FRONTEND
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: student-frontend:ci
          severity: HIGH,CRITICAL
          ignore-unfixed: true
          format: table
          exit-code: 1
          cache-dir: ~/.cache/trivy

      - name: Print local image sizes
        run: docker images --format 'table {{.Repository}}\t{{.Tag}}\t{{.Size}}'

  open-pr-when-ahead:
    name: Auto PR dev → default
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [quality-checks, build-and-scan]
    if: success() && github.ref == 'refs/heads/dev'
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Open or reuse PR
        uses: actions/github-script@v7.0.1
        with:
          github-token: ${{ github.token }}
          script: |
            const { owner, repo } = context.repo;
            const head = 'dev';
            const { data: repoData } = await github.request('GET /repos/{owner}/{repo}', { owner, repo });
            const base = repoData.default_branch;
            if (base === head) {
              core.info(`Default branch equals head (${base}); nothing to PR.`);
              return;
            }
            const { data: cmp } = await github.request(
              'GET /repos/{owner}/{repo}/compare/{base}...{head}', { owner, repo, base, head }
            );
            const ahead = Number(cmp.ahead_by || 0);
            core.info(`dev is ahead of ${base} by ${ahead} commits`);
            if (ahead <= 0) return;

            const { data: prs } = await github.rest.pulls.list({
              owner, repo, state: 'open', base, head: `${owner}:${head}`
            });
            if (prs.length > 0) {
              core.info(`PR already open: #${prs[0].number} (${prs[0].html_url})`);
              return;
            }

            const body = [
              `This PR was automatically opened after CI checks passed on **${head}**.`,
              `Commit: ${context.sha}`,
              `Actor: @${context.actor}`
            ].join('\n');

            const { data: pr } = await github.rest.pulls.create({
              owner, repo, head, base,
              title: `Auto PR: ${head} → ${base} (CI)`,
              body
            });
            core.info(`Created PR #${pr.number} (${pr.html_url})`);
