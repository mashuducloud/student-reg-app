name: CI

on:
  workflow_dispatch:
  push:
    branches: ["dev"]
  pull_request:
    branches: ["dev"]

permissions:
  contents: write
  pull-requests: write

jobs:
  ci-checks:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install tooling
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt flake8 bandit pytest pytest-cov yamllint requests

      - name: Lint (flake8)
        run: flake8 backend/

      - name: Security scan (bandit, non-blocking)
        run: bandit -r backend/ || true

      - name: Validate YAML configs
        run: yamllint infra/otel-collector-config.yaml infra/prometheus.yml infra/tempo.yaml

      - name: Prepare CI env for docker-compose
        run: |
          mkdir -p infra
          cat > infra/.env <<'EOF'
          DB_HOST=mysql-db
          DB_PORT=3306
          DB_NAME=student_registration_db
          DB_USER=student
          DB_PASSWORD=ci_pw_123
          MYSQL_DATABASE=student_registration_db
          MYSQL_USER=student
          MYSQL_PASSWORD=ci_pw_123
          MYSQL_ROOT_PASSWORD=ci_root_123
          MYSQL_ROOT_HOST=%
          EOF
          echo "Wrote infra/.env for CI run."

      - name: Show Compose config (sanity check)
        run: docker compose -f infra/docker-compose.yml config

      - name: Run backend tests with coverage (persist artifacts)
        run: |
          mkdir -p coverage
          docker compose -f infra/docker-compose.yml run --rm \
            -v "$PWD/coverage:/app/coverage" \
            tests \
            pytest --cov=. --cov-report=term-missing \
                   --cov-report=xml:coverage/coverage.xml \
                   --cov-report=html:coverage/htmlcov -v

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage/coverage.xml
            coverage/htmlcov/
          if-no-files-found: error

      # IMPORTANT: build from repo root so COPY backend/... works
      - name: Build backend image
        run: docker build -t student-app:ci -f infra/Dockerfile.backend .

      - name: Build frontend image
        run: docker build -t student-frontend:ci -f infra/Dockerfile.frontend .

      - name: Tear down compose resources
        if: always()
        run: docker compose -f infra/docker-compose.yml down -v

      - name: Open or reuse PR dev → default branch
        if: success() && github.ref == 'refs/heads/dev'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const core = require('@actions/core');
            const { owner, repo } = context.repo;

            // Determine default branch (main/master/etc.)
            const repoInfo = await github.rest.repos.get({ owner, repo });
            const base = repoInfo.data.default_branch;
            const head = 'dev';

            if (base === head) {
              core.info(`Default branch (${base}) equals head (${head}); skipping PR.`);
              return;
            }

            // If an open PR already exists from dev -> base, reuse it
            const existing = await github.rest.pulls.list({
              owner, repo, state: 'open', base, head: `${owner}:${head}`
            });
            if (existing.data.length > 0) {
              core.info(`PR already open: #${existing.data[0].number} (${existing.data[0].html_url})`);
              return;
            }

            // Create the PR (use single-line body with explicit \n to avoid YAML schema warnings)
            const prBody =
              "This PR was automatically opened by CI after all checks on **" + head + "** passed." +
              "\\n\\nCommit: " + context.sha +
              "\\nActor: @" + context.actor;

            const res = await github.rest.pulls.create({
              owner, repo, head, base,
              title: `Auto PR: ${head} → ${base} (opened by CI)`,
              body: prBody,
              draft: false
            });

            core.info(`Created PR #${res.data.number} (${res.data.html_url})`);
