name: CI

on:
  workflow_dispatch:
  push:
    branches: ["dev"]
  pull_request:
    branches: ["main"]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: false

jobs:
  ci-checks:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install tooling
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt flake8 bandit pytest pytest-cov yamllint requests

      - name: Lint (flake8)
        run: flake8 backend/

      - name: Security scan (bandit, non-blocking)
        run: bandit -r backend/ || true

      - name: Validate YAML configs
        run: yamllint infra/otel-collector-config.yaml infra/prometheus.yml infra/tempo.yaml

      - name: Prepare CI env for docker-compose
        run: |
          mkdir -p infra
          cat > infra/.env <<'EOF'
          DB_HOST=mysql-db
          DB_PORT=3306
          DB_NAME=student_registration_db
          DB_USER=student
          DB_PASSWORD=ci_pw_123
          MYSQL_DATABASE=student_registration_db
          MYSQL_USER=student
          MYSQL_PASSWORD=ci_pw_123
          MYSQL_ROOT_PASSWORD=ci_root_123
          MYSQL_ROOT_HOST=%
          EOF
          echo "Wrote infra/.env for CI run."

      - name: Show Compose config (sanity check)
        run: docker compose -f infra/docker-compose.yml config

      - name: Run backend tests with coverage (persist artifacts)
        run: |
          mkdir -p coverage
          docker compose -f infra/docker-compose.yml run --rm             -v "$PWD/coverage:/app/coverage"             tests             pytest --cov=. --cov-report=term-missing                    --cov-report=xml:coverage/coverage.xml                    --cov-report=html:coverage/htmlcov -v

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage/coverage.xml
            coverage/htmlcov/
          if-no-files-found: error

      - name: Build backend image
        run: docker build -t student-app:ci -f infra/Dockerfile.backend .

      - name: Build frontend image
        run: docker build -t student-frontend:ci -f infra/Dockerfile.frontend 

      - name: Tear down compose resources
        if: always()
        run: docker compose -f infra/docker-compose.yml down -v

  open-pr:
    needs: ci-checks
    if: ${{ success() && github.event_name == 'push' && github.ref == 'refs/heads/dev' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Open or reuse PR dev → main
        uses: actions/github-script@v7
        with:
          script: |
            const head = 'dev';
            const base = 'main';
            const { owner, repo } = context.repo;

            const { data: prs } = await github.rest.pulls.list({
              owner, repo, state: 'open', base, head: `${owner}:${head}`
            });

            if (prs.length > 0) {
              core.info(`Existing PR #${prs[0].number} from ${head} -> ${base} found: ${prs[0].html_url}`);
              return;
            }

            const title = `Auto PR: ${head} → ${base} (opened by CI)`;
            const body = [
              'This PR was automatically opened by CI after all checks on **dev** passed.',
              '',
              `Commit: ${context.sha}`,
              `Actor: @${context.actor}`
            ].join('\n');

            const { data: pr } = await github.rest.pulls.create({
              owner, repo, head, base, title, body, draft: false
            });

            core.info(`Opened PR #${pr.number}: ${pr.html_url}`)
